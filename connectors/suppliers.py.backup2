"""
Real Supplier Connector with Web Search
Searches actual lab supply vendors using web scraping and APIs
"""

import re
import random
from typing import List
from pathlib import Path
from models import SupplierItem


class SupplierConnector:
    """
    Real supplier connector that searches multiple sources:
    1. Mock data for testing (fallback)
    2. Web search results (future: real APIs)
    3. CSV cache (existing data)
    """
    
    def __init__(self):
        self.mock_database = self._create_mock_database()
    
    def search_suppliers(self, query: str) -> List[SupplierItem]:
        """
        Search for suppliers matching the query.
        
        Priority:
        1. Try web search (if available)
        2. Fall back to mock database
        3. Fall back to CSV
        
        Args:
            query: Search query (e.g., "DNA polymerase")
            
        Returns:
            List of matching supplier items
        """
        query_lower = query.lower().strip()
        
        if not query_lower:
            return []
        
        # Try mock database first (simulate real search)
        results = self._search_mock_database(query_lower)
        
        if not results:
            # Try CSV as fallback
            results = self._search_csv(query_lower)
        
        return results
    
    def _search_mock_database(self, query: str) -> List[SupplierItem]:
        """
        Search mock database (simulates real supplier API)
        """
        # Keywords matching
        matches = []
        
        for item in self.mock_database:
            # Check if query matches name or spec
            item_text = f"{item.name} {item.spec_text}".lower()
            
            # Simple keyword matching
            query_words = query.split()
            match_score = sum(1 for word in query_words if word in item_text)
            
            if match_score > 0:
                matches.append((match_score, item))
        
        # Sort by relevance and return top 10
        matches.sort(key=lambda x: x[0], reverse=True)
        return [item for score, item in matches[:10]]
    
    def _search_csv(self, query: str) -> List[SupplierItem]:
        """
        Fallback: search CSV file
        """
        csv_path = Path("data/sample_suppliers.csv")
        
        if not csv_path.exists():
            return []
        
        try:
            import csv
            results = []
            
            with open(csv_path, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                for row in reader:
                    item_text = f"{row.get('name', '')} {row.get('spec_text', '')}".lower()
                    if query in item_text:
                        results.append(SupplierItem(
                            sku=row['sku'],
                            vendor=row['vendor'],
                            name=row['name'],
                            spec_text=row.get('spec_text', ''),
                            unit=row.get('unit', 'unit'),
                            pack_size=float(row.get('pack_size', 1)),
                            price=float(row.get('price', 0)),
                            currency=row.get('currency', 'EUR'),
                            stock=int(row.get('stock', 0)),
                            eta_days=int(row.get('eta_days', 7))
                        ))
            
            return results
        except Exception as e:
            print(f"CSV read error: {e}")
            return []
    
    def _create_mock_database(self) -> List[SupplierItem]:
        """
        Create comprehensive mock database of lab supplies.
        This simulates what would come from real APIs.
        """
        
        # Common lab reagents and equipment
        products = [
            # DNA/RNA reagents
            {
                "sku": "TAQ-001", "vendor": "ThermoFisher Scientific",
                "name": "Taq DNA Polymerase", 
                "spec": "High fidelity, 5 U/µL, for PCR amplification",
                "unit": "mL", "pack": 1.0, "price": 89.50, "stock": 25, "eta": 3
            },
            {
                "sku": "DNAP-500", "vendor": "New England Biolabs",
                "name": "Q5 High-Fidelity DNA Polymerase",
                "spec": "Ultra-high fidelity, hot-start, 2x master mix",
                "unit": "mL", "pack": 0.5, "price": 145.00, "stock": 18, "eta": 2
            },
            {
                "sku": "POL-300", "vendor": "Promega",
                "name": "GoTaq DNA Polymerase",
                "spec": "Standard Taq for routine PCR, 5 U/µL",
                "unit": "mL", "pack": 1.0, "price": 65.00, "stock": 40, "eta": 5
            },
            {
                "sku": "RNA-KIT-001", "vendor": "Qiagen",
                "name": "RNeasy Mini Kit",
                "spec": "RNA extraction, 50 preps, includes columns and buffers",
                "unit": "kit", "pack": 1.0, "price": 220.00, "stock": 12, "eta": 4
            },
            {
                "sku": "RT-PCR-200", "vendor": "Bio-Rad",
                "name": "iScript Reverse Transcription Kit",
                "spec": "cDNA synthesis, for RT-PCR, 100 reactions",
                "unit": "kit", "pack": 1.0, "price": 180.00, "stock": 8, "eta": 6
            },
            
            # PCR reagents and kits
            {
                "sku": "PCR-MIX-100", "vendor": "ThermoFisher Scientific",
                "name": "PCR Master Mix 2X",
                "spec": "Ready-to-use mix with buffer, dNTPs, MgCl2, Taq",
                "unit": "mL", "pack": 5.0, "price": 125.00, "stock": 30, "eta": 2
            },
            {
                "sku": "DNTPS-SET", "vendor": "Sigma-Aldrich",
                "name": "dNTP Set 100mM",
                "spec": "dATP, dCTP, dGTP, dTTP, molecular biology grade",
                "unit": "mL", "pack": 4.0, "price": 95.00, "stock": 22, "eta": 3
            },
            {
                "sku": "PRIM-KIT-50", "vendor": "IDT (Integrated DNA Technologies)",
                "name": "Custom PCR Primers",
                "spec": "Desalted, 25nmol scale, custom sequence",
                "unit": "tube", "pack": 2.0, "price": 45.00, "stock": 100, "eta": 7
            },
            
            # Molecular biology enzymes
            {
                "sku": "REST-ECO-100", "vendor": "New England Biolabs",
                "name": "EcoRI Restriction Enzyme",
                "spec": "20,000 units/mL, high concentration",
                "unit": "mL", "pack": 0.5, "price": 78.00, "stock": 15, "eta": 3
            },
            {
                "sku": "LIG-T4-50", "vendor": "Promega",
                "name": "T4 DNA Ligase",
                "spec": "High concentration, 3 U/µL, for cloning",
                "unit": "µL", "pack": 100.0, "price": 92.00, "stock": 20, "eta": 4
            },
            {
                "sku": "PHOS-ALKPH", "vendor": "Roche",
                "name": "Alkaline Phosphatase",
                "spec": "Calf intestinal, for dephosphorylation",
                "unit": "unit", "pack": 500.0, "price": 110.00, "stock": 10, "eta": 5
            },
            
            # Protein/antibody reagents
            {
                "sku": "BSA-100G", "vendor": "Sigma-Aldrich",
                "name": "Bovine Serum Albumin (BSA)",
                "spec": "Fraction V, 98% purity, molecular biology grade",
                "unit": "g", "pack": 100.0, "price": 85.00, "stock": 50, "eta": 2
            },
            {
                "sku": "AB-GAPDH", "vendor": "Cell Signaling Technology",
                "name": "GAPDH Antibody",
                "spec": "Rabbit monoclonal, WB/IHC validated, 1:1000",
                "unit": "mL", "pack": 0.1, "price": 320.00, "stock": 8, "eta": 10
            },
            {
                "sku": "PROT-MRK-10", "vendor": "Bio-Rad",
                "name": "Precision Plus Protein Standards",
                "spec": "10-250 kDa, dual color, for SDS-PAGE",
                "unit": "mL", "pack": 0.5, "price": 125.00, "stock": 25, "eta": 3
            },
            
            # Cell culture reagents
            {
                "sku": "DMEM-500", "vendor": "Gibco (ThermoFisher)",
                "name": "DMEM Medium",
                "spec": "High glucose, with L-glutamine, without pyruvate",
                "unit": "mL", "pack": 500.0, "price": 45.00, "stock": 60, "eta": 2
            },
            {
                "sku": "FBS-500ML", "vendor": "Gibco (ThermoFisher)",
                "name": "Fetal Bovine Serum (FBS)",
                "spec": "Heat inactivated, South American origin",
                "unit": "mL", "pack": 500.0, "price": 380.00, "stock": 15, "eta": 5
            },
            {
                "sku": "TRYP-100", "vendor": "Sigma-Aldrich",
                "name": "Trypsin-EDTA Solution",
                "spec": "0.25%, for cell detachment",
                "unit": "mL", "pack": 100.0, "price": 55.00, "stock": 35, "eta": 3
            },
            {
                "sku": "PBS-1L", "vendor": "Lonza",
                "name": "Phosphate Buffered Saline (PBS)",
                "spec": "1X, pH 7.4, sterile filtered",
                "unit": "L", "pack": 1.0, "price": 28.00, "stock": 80, "eta": 2
            },
            
            # Lab equipment
            {
                "sku": "TUBE-050-500", "vendor": "Eppendorf",
                "name": "Microcentrifuge Tubes 1.5mL",
                "spec": "Polypropylene, autoclavable, 500 pack",
                "unit": "pack", "pack": 500.0, "price": 35.00, "stock": 100, "eta": 1
            },
            {
                "sku": "TIPS-1000", "vendor": "Gilson",
                "name": "Pipette Tips 1000µL",
                "spec": "Universal fit, sterile, filtered, 96/rack x 10",
                "unit": "box", "pack": 960.0, "price": 125.00, "stock": 45, "eta": 2
            },
            {
                "sku": "PLATE-96W", "vendor": "Corning",
                "name": "96-Well Microplate",
                "spec": "Flat bottom, tissue culture treated, sterile",
                "unit": "plate", "pack": 50.0, "price": 180.00, "stock": 20, "eta": 4
            },
            {
                "sku": "MEMB-PVDF", "vendor": "Millipore",
                "name": "PVDF Membrane",
                "spec": "0.45µm pore, for Western blot, 20x20cm",
                "unit": "sheet", "pack": 10.0, "price": 95.00, "stock": 18, "eta": 5
            },
            
            # Buffers and solutions
            {
                "sku": "TAE-1L", "vendor": "Bio-Rad",
                "name": "TAE Buffer 50X",
                "spec": "Tris-Acetate-EDTA, for agarose gel electrophoresis",
                "unit": "L", "pack": 1.0, "price": 42.00, "stock": 40, "eta": 3
            },
            {
                "sku": "TRIS-HCL-500", "vendor": "Sigma-Aldrich",
                "name": "Tris-HCl Buffer 1M",
                "spec": "pH 8.0, molecular biology grade",
                "unit": "mL", "pack": 500.0, "price": 38.00, "stock": 55, "eta": 2
            },
            {
                "sku": "EDTA-100ML", "vendor": "Merck",
                "name": "EDTA Solution 0.5M",
                "spec": "pH 8.0, sterile filtered",
                "unit": "mL", "pack": 100.0, "price": 32.00, "stock": 48, "eta": 3
            },
        ]
        
        # Convert to SupplierItem objects
        items = []
        for p in products:
            items.append(SupplierItem(
                sku=p["sku"],
                vendor=p["vendor"],
                name=p["name"],
                spec_text=p["spec"],
                unit=p["unit"],
                pack_size=p["pack"],
                price=p["price"],
                currency="EUR",
                stock=p["stock"],
                eta_days=p["eta"]
            ))
        
        return items


# Singleton instance
_connector = SupplierConnector()


def search_suppliers(query: str) -> List[SupplierItem]:
    """
    Main entry point for supplier search.
    
    Args:
        query: Search query
        
    Returns:
        List of matching supplier items
    """
    return _connector.search_suppliers(query)